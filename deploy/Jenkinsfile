
pipeline {
    agent any
    environment {
        DOCKER_REGISTRY = 'localhost:5001'  // 本地仓库地址
        DOCKER_USERNAME = credentials('docker-username')  // Jenkins凭据ID
        DOCKER_PASSWORD = credentials('docker-password')  // Jenkins凭据ID
    }
    parameters {
        gitParameter(
            branchFilterType: 'All',  // 可选：All、Remote、Local 等
            defaultValue: 'master',
            name: 'branch',
            quickFilterEnabled: true,  // 启用快速筛选
            selectedValue: 'DEFAULT',
            sortMode: 'DESCENDING_SMART',  // 按字母降序排列
            tagFilterRegex: '*',
            type: 'PT_BRANCH',  // 参数类型：分支
            useRepository: 'https://github.com/your-repo.git'  // 仓库地址
        )
    }
    stages {
        stage('Init') {
            steps {
                script{
                    def dockerPath = tool 'docker' //全局配置里的docker
                    env.PATH = "${dockerPath}/bin:${env.PATH}" //添加了系统环境变量上
                }
            }
        }
        stage('Git') {
            steps {
                checkout scm: [
                    $class: 'GitSCM',
                    branches: [[name: "*/${params.BRANCH}"]],
                    userRemoteConfigs: [[url: 'https://github.com/your-repo.git']]
                ]
            }
        }
        stage('Build') {
            steps {
                script{
                    sh "docker build --rm -t ${params.name}:${params.version}  -f deploy/Dockerfile ."
                }
            }
        }
        stage('Deploy:Docker') {
            steps {
                script{
                    sh "docker login -u djlxs -p djl.l951753" 
                    sh "docker tag ${params.name}:${params.version} djlxs/${params.name}:${params.version}" 
                    sh "docker push djlxs/${params.name}:${params.version}"
                }
            }
        }
        stage('YAML') {
            steps {
                script{
                    sh "sed -i '' 's/<VERSION>/${params.version}/' deploy/k8s/deployment.yaml"
                    sh "sed -i '' 's/<NAME>/${params.name}/' deploy/k8s/deployment.yaml"
                    
                    sh "sed -i '' 's/<VERSION>/${params.version}/' deploy/k8s/service.yaml"
                    sh "sed -i '' 's/<NAME>/${params.name}/' deploy/k8s/service.yaml"

                    sh "sed -i '' 's/<NAME>/${params.name}/' deploy/k8s/ingress.yaml"
                    sh "sed -i '' 's/<VERSION>/${params.version}/' deploy/k8s/ingress.yaml"

                    sh "sed -i '' 's/<VERSION>/${params.name}/' deploy/k8s/router.ingress.yaml"
                }
            }
        }
        stage('Deploy:k8s') {
            steps {
                script{
                    echo "-------deployment--------"
                    sh "cat deploy/k8s/deployment.yaml"
                    sh "kubectl apply -f deploy/k8s/deployment.yaml"
                    echo "-------service--------"
                    sh "cat deploy/k8s/service.yaml"
                    sh "kubectl apply -f deploy/k8s/service.yaml"
                    echo "-------ingress--------"
                    sh "cat deploy/k8s/ingress.yaml"
                    sh "kubectl apply -f deploy/k8s/ingress.yaml"
                    echo "-------ingress--------"
                    sh "kubectl apply -f deploy/k8s/ingress.yaml"
                    echo "-------router ingress--------"
                    sh "kubectl apply -f deploy/k8s/router.ingress.yaml"
                }
            }
        }
        stage('Generate:gray config') {
            steps {
                script{
                    // 读取配置文件内容到 Groovy 变量
                    def configContent = readFile('gray.config.txt').trim()

                    echo "-------exec grayConfigGenerator.js--------"
                    sh "node grayConfigGenerator.js"
                    echo "------- add gray config info--------"
                    sh "kubectl annotate ingress ${params.name}.routing.ingress \
                          nginx.ingress.kubernetes.io/configuration-snippet='${configContent}' \
                          --overwrite"
                }
            }
        }
    }
}