
pipeline {
    agent any
    environment {
        DOCKER_REGISTRY = 'localhost:5001'  // Docker本地仓库地址
    }
    parameters {
        gitParameter(
            branchFilter: 'origin/(.*)',  // 替代 branchFilterType
            defaultValue: 'master',
            name: 'branch',
            quickFilterEnabled: true,
            selectedValue: 'DEFAULT',
            sortMode: 'DESCENDING_SMART',
            tagFilter: '*',  // 替代 tagFilterRegex
            type: 'PT_BRANCH',
            useRepository: "${env.GIT_URL}"
        )
    }
    stages {
        stage('Git:Checkout') {
            steps {
                checkout scm: [
                    $class: 'GitSCM',
                    branches: [[name: "*/${params.branch}"]],
                    userRemoteConfigs: [[url: "${env.GIT_URL}"]]
                ]
            }
        }
        stage('Docker:Init') {
            steps {
                script{
                    // 从全局工具配置获取 Docker 路径，并拼接到 PATH
                    def dockerPath = tool 'docker'
                    // 仅在 withEnv 块内生效，不影响全局
                    withEnv(["PATH=${dockerPath}/bin:${env.PATH}"]) {
                        sh 'docker --version'
                    }
                }
            }
        }
        stage('Docker:Clean Old Image') {
            steps {
                script {
                    // 检查镜像是否存在，存在则删除 避免本地有很多 “悬空”镜像
                    def imageExists = sh(
                        script: "docker images --format '{{.Repository}}:{{.Tag}}' | grep -q '${params.name}:${params.version}'",
                        returnStatus: true
                    )

                    if (imageExists == 0) {
                        echo "本地存在 ${params.name}:${params.version} 镜像，开始删除..."
                        sh "docker rmi -f ${params.name}:${params.version}"
                    } else {
                        echo "本地不存在 ${params.name}:${params.version} 镜像，无需删除"
                    }
                }
            }
        }
        stage('Docker:Build') {
            steps {
                script{
                    // 拼接 build-arg 参数，将 Jenkins 参数传递给 Docker
                    def buildArgs = [
                        "--build-arg COS_SECRET_ID=${params.cos_secret_id}",
                        "--build-arg COS_SECRET_KEY=${params.cos_secret_key}",
                        "--build-arg COS_BUCKET=${params.cos_bucket}",
                        "--build-arg COS_REGION=${params.cos_region}",
                        "--build-arg VERSION=${params.version}",
                    ].join(' ')

                    sh "docker build ${buildArgs} --rm -t ${params.name}:${params.version}  -f deploy/Dockerfile ."
                    echo "docker build success"
                }
            }
        }
        stage('Docker:Tag') {
            steps {
                script{
                    sh "docker tag ${params.name}:${params.version} $DOCKER_REGISTRY/${params.name}:${params.version}" 
                }
            }
        }
        // 本地Docker镜像仓库
        stage('Docker:Push') {
            steps {
                script{
                    sh "docker login -u djlxs -p 123456 $DOCKER_REGISTRY" 
                    sh "docker push $DOCKER_REGISTRY/${params.name}:${params.version}"
                }
            }
        }
        stage('YAML') {
            steps {
                script{
                    sh "sed -i '' 's/<VERSION>/${params.version}/' deploy/k8s/deployment.yaml"
                    sh "sed -i '' 's/<NAME>/${params.name}/' deploy/k8s/deployment.yaml"
                    
                    sh "sed -i '' 's/<VERSION>/${params.version}/' deploy/k8s/service.yaml"
                    sh "sed -i '' 's/<NAME>/${params.name}/' deploy/k8s/service.yaml"

                    sh "sed -i '' 's/<NAME>/${params.name}/' deploy/k8s/ingress.yaml"
                    sh "sed -i '' 's/<VERSION>/${params.version}/' deploy/k8s/ingress.yaml"
                }
            }
        }
        stage('Deploy:k8s') {
            steps {
                script{
                    echo "-------deployment--------"
                    sh "cat deploy/k8s/deployment.yaml"
                    sh "kubectl apply -f deploy/k8s/deployment.yaml"
                    echo "-------service--------"
                    sh "cat deploy/k8s/service.yaml"
                    sh "kubectl apply -f deploy/k8s/service.yaml"
                    echo "-------ingress--------"
                    sh "cat deploy/k8s/ingress.yaml"
                    sh "kubectl apply -f deploy/k8s/ingress.yaml"
                }
            }
        }
    }
}